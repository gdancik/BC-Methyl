load("data/GPL8490.RData")
load("data/GPL9183.RData")
source("findbestprobe.R")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
#Dataset names
#GSE37817.methyl = KRIBAB
#GSE33510.meth = LU
#GSE28094.meth = IUOPA
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE33510.meth, GSE33510.meth.tumor_normal)
findbestprobe(gene, GPLmeth2, GSE28094.meth, GSE28094.methyl.tumor)
a
findbestprobe(gene, GPLmeth2, GSE28094.meth, GSE28094.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
library(GEOquery)
## methylation datasets
setwd("C:/Users/Owner/Desktop/BC-Methyl/")
load("data/GSE37817.RData")
load("data/GSE33510.RData")
load("data/GSE28094.RData")
## methylation platforms
load("data/GPL8490.RData")
load("data/GPL9183.RData")
source("findbestprobe.R")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
#Dataset names
#GSE37817.methyl = KRIBAB
#GSE33510.meth = LU
#GSE28094.meth = IUOPA
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
gene = getgene()
findbestprobe(gene, GPLmeth, GSE37817.methyl, GSE37817.methyl.tumor)
s[[1]]
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
matching = grep(gene, GPL$Symbol) #Match gene to gene name in platform data
runApp('shiny')
if (matching == " "){
return(NULL)
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?return
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
gene = paste0("^",gene,"$")
matching = grep(gene, GPL$Symbol) #Match gene to gene name in platform data
load("data/GPL8490.RData")
load("data/GPL9183.RData")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
matching = grep(gene, GPL$Symbol) #Match gene to gene name in platform data
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
matching
runApp('shiny')
findprobe = GPL$ID[matching] #Find probe(s) for gene
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe
runApp('shiny')
runApp('shiny')
gene = getgene()
gene = paste0("^",gene,"$")
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
matching
if (matching == integer(0)){
return(NULL)
}
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
if (matching == integer(0)){
return("yippee")
}
if (matching == integer(0)){
print("yippee")
}
if (length(matching) == 0){
print("yippee")
}
if (length(matching) == 0){
return(NULL)
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
load("data/GSE28094.RData")
runApp('shiny')
runApp('shiny')
load("data/GPL8490.RData")
load("data/GPL9183.RData")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
if (length(matching) == 0){
return(NULL)
}
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
if (length(matching) == 0){
return(NULL)
}
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe
matching
gene = paste0("^",gene,"$")
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
matching
if (length(matching) == 0){
return(NULL)
}
runApp('shiny')
gene = getgene()
gene = paste0("^",gene,"$")
matching = grep(gene, GPLmeth2$Symbol) #Match gene to gene name in platform data
matching
runApp('shiny')
load("data/GSE28094.RData")
runApp('shiny')
load("data/GPL8490.RData")
load("data/GPL9183.RData")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
matching = grep(gene, GPLmeth2$Symbol) #Match gene to gene name in platform data
if (length(matching) == 0){
return(NULL)
}
gene = getgene()
gene = paste0("^",gene,"$")
matching = grep(gene, GPLmeth2$Symbol) #Match gene to gene name in platform data
matching
if (length(matching) == 0){
return(NULL)
}
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
findprobe
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
matching
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
findprobe
na.exclude?
d
?na.exclude
find = match(findprobe, rownames(X)) #Match probe(s) to row(s) in patient dataset
load("data/GSE37817.RData")
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
length(find)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
load("data/GPL8490.RData")
load("data/GPL9183.RData")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
gene = paste0("^",gene,"$")
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
matching
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
findprobe
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
load("data/GSE37817.RData")
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
find
is.na(find)
if (is.na(find) = TRUE){ na.omit(find)}
if (is.na(find) == TRUE){ na.omit(find)}
find
if (is.na(find) == TRUE){ find = na.omit(find)}
find
runApp('shiny')
runApp('shiny')
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
length(find)
find
if (is.na(find) == TRUE){
find = na.omit(find)}
find
length(find)
runApp('shiny')
?complete.cases
runApp('shiny')
runApp('shiny')
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
is.na(findprobe)
findprobe = na.omit(findprobe)
findprobe
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
is.na(findprobe)
findprobe = findprobe[!is.na(findprobe)]
findprobe
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
find
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
findprobe
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
find
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe
matching = grep(gene, GPLmeth2$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth2$ID[matching] #Find probe(s) for gene
findprobe
matching
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe
find = match(findprobe, rownames(GSE37817.methyl)) #Match probe(s) to row(s) in patient dataset
find
load("data/GSE33510.RData")
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
find
newvector = c(1)
for (i in 1:length(find)) {
find = match(findprobe, rownames(X)) #Match probe(s) to row(s) in patient dataset
m = find[i]
s = split(X[m,], Y)
}
for (i in 1:length(find)) {
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
m = find[i]
s = split(GSE33510.meth[m,],GSE33510.meth.tumor_normal)
}
m
for (i in 1:length(find)) {
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
m = find[i]
m
s = split(GSE33510.meth[m,],GSE33510.meth.tumor_normal)
}
for (i in 1:length(find)) {
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
m = find[i]
print(m)
s = split(GSE33510.meth[m,],GSE33510.meth.tumor_normal)
}
s
is.na(s)
is.na([s])
is.na([[s]])
for (i in 1:length(find)) {
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
m = find[i]
print(m)
print(GSE33510.meth[m,])
s = split(GSE33510.meth[m,],GSE33510.meth.tumor_normal)
}
is.na(GSE33510.meth[m,])
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
findbestprobe = function(gene, GPL, X, Y, title){
gene = paste0("^",gene,"$")
matching = grep(gene, GPL$Symbol) #Match gene to gene name in platform data
i = 1
if (length(matching) == 0){
return(NULL)
}else{
findprobe = GPL$ID[matching] #Find probe(s) for gene
find = match(findprobe, rownames(X)) #Match probe(s) to row(s) in patient dataset
newvector = c(1)
for (i in 1:length(find)) {
find = match(findprobe, rownames(X)) #Match probe(s) to row(s) in patient dataset
m = find[i]
if (is.na(X[m,] == TRUE)){
return(NULL)
} else {
s = split(X[m,], Y)
means = lapply(s, mean, na.rm = TRUE)
meanchange = means[[1]] - means[[2]]
a = s[[1]]
b = s[[2]]
z = t.test(a,b, na.rm =TRUE)
p_value= z$p.value
p_value =na.omit(p_value)
FC = 2**meanchange #Fold Change
newvector = c(newvector, p_value)
print(newvector)
}
newvector = p.adjust(newvector, method = "fdr")
which.min(newvector)
FDR= newvector[i+1]
if (FDR < 0.001){
FDR = "FDR is < 0.001"
}
boxplot(s, main = paste(title, " FC = ", round(FC,2), "FDR = ", FDR, col = c("purple", "pink"), ylab = "Beta Value", names = c("normal", "bladder cancer"))
}
}
}
# evaluates differential methylation for paired (e.g., TCGA) data
# function assumes rownames contain the genes
# TO DO: needs to handle case where gene is not found
evaluate.paired <- function(gene, X.tumor, X.normal) {
m = match(gene, rownames(X.tumor))
matplot(rbind(X.normal[m,],X.tumor[m,]),
ylab = "Methylation (Beta value)", xaxt = "n",
type = "b", pch = 19, col = 1,
lty = 1, xlim = c(0.9, 2.1))
axis(1, at = 1:2, labels = c("Normal", "Tumor"))
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
cats = c((NA, 5), 2, 3, 4, 7, 8, 9, 2, (NA, 4), 23)
cats = c(("NA", 5), 2, 3, 4, 7, 8, 9, 2, ("NA", 4), 23)
cats = c("NA", 2, 3, 4, 7, 8, 9, 2, "NA", 23)
min(cats)
cats = na.omit(cats)
min(cats)
cats = na.omit(cats)
cats = is.na(cats)
cats
cats = c("NA", 2, 3, 4, 7, 8, 9, 2, "NA", 23)
cats = is.na(cats)
cats = c(NA, 2, 3, 4, 7, 8, 9, 2, NA, 23)
min(cats)
cats = is.na(cats)
cats = c(NA, 2, 3, 4, 7, 8, 9, 2, NA, 23)
min(cats)
cats = na.omit(cats)
min(cats)
runApp('shiny')
a = c((1,2,3,4,5), rep(5))
?rep
a = rep((1,2,3,4,5), 5)
a = c(1,2,3,4,5, rep(20, 20))
b = c(6,47,2,9,15, rep(27, 15))
z = t.test(a,b)
z
c = c(1, rep(NA, 20))
d = c(6, rep(NA, 15))
z = t.test(a,b)
z = t.test(c,d)
c = c(1, rep(NA, 20, 3, 5))
d = c(6, rep(NA, 15, 4, 2))
z = t.test(c,d)
?try
?is
c = c(1, rep(NA, 20, 3, 5))
d = c(6, rep(NA, 15, 4, 2))
if (is(t.test(c,d), "try-error")) {
return(NULL) }
cats = try(t.test(c,d), silent = FALSE)
cats = try(t.test(c,d), silent = TRUE)
if (is(cats), "try-error")) {
return(NULL) }
if (is(cats), "try-error"))
return(NULL)
if (is(cats, "try-error")){
return(NULL)}
c = c(1, rep(NA, 20, 3, 5))
d = c(6, rep(NA, 15, 4, 2))
cats = try(t.test(c,d), silent = TRUE)
if (is(cats, "try-error")){
return(NULL)
}
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?is.na
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
title = "file"
file = paste0(title, ".RData")
file
getwd()
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
?matplot
runApp('shiny')
runApp('shiny')
load("data/GPL8490.RData")
load("data/GPL9183.RData")
GPLmeth = Table(GPLmeth) #Illumina HumanMethylation27 Beadchip Array Platform Data
GPLmeth2 = Table(GPLmeth2) #GoldenGate Methylation Array Platform Data
getgene = function()
{
x = readline(prompt = "Enter a gene: ")
return(as.character(x))
}
gene = getgene()
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe = findprobe[!is.na(findprobe)]
find = match(findprobe, rownames(GSE33510.meth))
find
gene
gene = getgene()
matching = grep(gene, GPLmeth$Symbol) #Match gene to gene name in platform data
findprobe = GPLmeth$ID[matching] #Find probe(s) for gene
findprobe = findprobe[!is.na(findprobe)]
find = match(findprobe, rownames(GSE33510.meth)) #Match probe(s) to row(s) in patient dataset
find
length(find)
